<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Antecedents :: My New Hugo Site</title>
    <link>http://localhost:1313/documentation/antecedents/index.html</link>
    <description>CLASS pyanfis.antecedents.Antecedents(universes) Parameters The antecedents will receive a dictionary that inside will have a set of universes,&#xA;name(dict) - dictionary with “Input 1”, “Input 2”, … as keys and universes as values. This class is used to define the range in which a variable is going to be defined in a fuzzy way, it is composed of several functions used to describe it.&#xA;Example import torch from pyanfis.antecedents import Antecedents params = { &#34;Input 1&#34;:{ &#34;name&#34;: &#34;Dummy_Universe_1&#34;, &#34;range&#34;: (0, 3), &#34;functions&#34;: { &#34;Small&#34;: { &#34;type&#34;: &#34;LinearZ&#34;, &#34;parameters&#34;: { &#34;shoulder&#34;: 0, &#34;foot&#34;: 2 } }, &#34;Medium&#34;: { &#34;type&#34;: &#34;Gauss&#34;, &#34;parameters&#34;: { &#34;mean&#34;: 1.5, &#34;std&#34;: 1 } }, &#34;Big&#34;: { &#34;type&#34;: &#34;LinearS&#34;, &#34;parameters&#34;: { &#34;foot&#34;: 1, &#34;shoulder&#34;: 3 } } } }, &#34;Input 2&#34;:{ &#34;name&#34;: &#34;Dummy_Universe_2&#34;, &#34;range&#34;: (0, 6), &#34;functions&#34;: { &#34;Small&#34;: { &#34;type&#34;: &#34;LinearZ&#34;, &#34;parameters&#34;: { &#34;shoulder&#34;: 0, &#34;foot&#34;: 4 } }, &#34;Medium&#34;: { &#34;type&#34;: &#34;Gauss&#34;, &#34;parameters&#34;: { &#34;mean&#34;: 3, &#34;std&#34;: 2 } }, &#34;Big&#34;: { &#34;type&#34;: &#34;LinearS&#34;, &#34;parameters&#34;: { &#34;foot&#34;: 2, &#34;shoulder&#34;: 5 } } } } } antecedents = Antecedents(params) x_1 = torch.linspace(0, 3, 9).unsqueeze(0).unsqueeze(-1) x_2 = torch.linspace(0, 6, 9).unsqueeze(0).unsqueeze(-1) x = torch.cat((x_1, x_2), dim=2) f_x = antecedents(x) tensor([[[0.0000, 0.0000], [0.3750, 0.7500], [0.7500, 1.5000], [1.1250, 2.2500], [1.5000, 3.0000], [1.8750, 3.7500], [2.2500, 4.5000], [2.6250, 5.2500], [3.0000, 6.0000]]]) tensor([[[1.0000, 0.3247, 0.0000, 1.0000, 0.3247, 0.0000], [0.8125, 0.5311, 0.0000, 0.8125, 0.5311, 0.0000], [0.6250, 0.7548, 0.0000, 0.6250, 0.7548, 0.0000], [0.4375, 0.9321, 0.0625, 0.4375, 0.9321, 0.0833], [0.2500, 1.0000, 0.2500, 0.2500, 1.0000, 0.3333], [0.0625, 0.9321, 0.4375, 0.0625, 0.9321, 0.5833], [0.0000, 0.7548, 0.6250, 0.0000, 0.7548, 0.8333], [0.0000, 0.5311, 0.8125, 0.0000, 0.5311, 1.0000], [0.0000, 0.3247, 1.0000, 0.0000, 0.3247, 1.0000]]], grad_fn=&lt;IndexPutBackward0&gt;) Visualization import matplotlib.pyplot as plt fig, axs = plt.subplots(nrows=1, ncols=len(antecedents.universes), figsize=(15, 5)) axs = axs.flatten() for ax, (universe, i) in zip(axs, zip(antecedents.universes.values(), x.T)): ax.set_title(universe.name) ax.set_xlabel(&#34;x&#34;) ax.set_ylabel(&#34;f (x)&#34;) ax.margins(y=0.05) i = i.unsqueeze(0) ax.plot(i[0, :, :].detach(), universe(i)[0, :, :].detach()) plt.tight_layout() plt.show()</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate></lastBuildDate>
    <atom:link href="http://localhost:1313/documentation/antecedents/index.xml" rel="self" type="application/rss+xml" />
  </channel>
</rss>